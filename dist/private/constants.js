"use strict";

module.exports = {
  BioPaxClass: ["BindingFeature", "BiochemicalPathwayStep", "BiochemicalReaction", "BioSource", "Catalysis", "CellularLocationVocabulary", "CellVocabulary", "ChemicalStructure", "Complex", "ComplexAssembly", "Control", "ControlledVocabulary", "Conversion", "CovalentBindingFeature", "Degradation", "DeltaG", "Dna", "DnaReference", "DnaRegion", "DnaRegionReference", "Entity", "EntityFeature", "EntityReference", "EntityReferenceTypeVocabulary", "Evidence", "EvidenceCodeVocabulary", "ExperimentalForm", "ExperimentalFormVocabulary", "FragmentFeature", "Gene", "GeneticInteraction", "Interaction", "InteractionVocabulary", "KPrime", "ModificationFeature", "Modulation", "MolecularInteraction", "Named", "Pathway", "PathwayStep", "PhenotypeVocabulary", "PhysicalEntity", "Protein", "ProteinReference", "Provenance", "PublicationXref", "RelationshipTypeVocabulary", "RelationshipXref", "Rna", "RnaReference", "RnaRegion", "RnaRegionReference", "Score", "SequenceInterval", "SequenceLocation", "SequenceModificationVocabulary", "SequenceRegionVocabulary", "SequenceSite", "SimplePhysicalEntity", "SmallMolecule", "SmallMoleculeReference", "Stoichiometry", "TemplateReaction", "TemplateReactionRegulation", "TissueVocabulary", "Transport", "TransportWithBiochemicalReaction", "UnificationXref", "Xref", "XReferrable"],

  pc2Formats: ["BINARY_SIF", "BIOPAX", "EXTENDED_BINARY_SIF", "GSEA", "JSONLD", "SBGN"],

  fileFormats: {
    "BINARY_SIF": "sif",
    "BIOPAX": "owl",
    "EXTENDED_BINARY_SIF": "sif",
    "GSEA": "gsea",
    "JSONLD": "json",
    "SBGN": "sbgn"
  },

  graphKind: ["COMMONSTREAM", "NEIGHBORHOOD", "PATHSBETWEEN", "PATHSFROMTO"],

  graphDirection: ["BOTHSTREAM", "DOWNSTREAM", "UNDIRECTED", "UPSTREAM"]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByaXZhdGUvY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJCaW9QYXhDbGFzcyIsInBjMkZvcm1hdHMiLCJmaWxlRm9ybWF0cyIsImdyYXBoS2luZCIsImdyYXBoRGlyZWN0aW9uIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZDLGVBQWEsQ0FDWCxnQkFEVyxFQUVYLHdCQUZXLEVBR1gscUJBSFcsRUFJWCxXQUpXLEVBS1gsV0FMVyxFQU1YLDRCQU5XLEVBT1gsZ0JBUFcsRUFRWCxtQkFSVyxFQVNYLFNBVFcsRUFVWCxpQkFWVyxFQVdYLFNBWFcsRUFZWCxzQkFaVyxFQWFYLFlBYlcsRUFjWCx3QkFkVyxFQWVYLGFBZlcsRUFnQlgsUUFoQlcsRUFpQlgsS0FqQlcsRUFrQlgsY0FsQlcsRUFtQlgsV0FuQlcsRUFvQlgsb0JBcEJXLEVBcUJYLFFBckJXLEVBc0JYLGVBdEJXLEVBdUJYLGlCQXZCVyxFQXdCWCwrQkF4QlcsRUF5QlgsVUF6QlcsRUEwQlgsd0JBMUJXLEVBMkJYLGtCQTNCVyxFQTRCWCw0QkE1QlcsRUE2QlgsaUJBN0JXLEVBOEJYLE1BOUJXLEVBK0JYLG9CQS9CVyxFQWdDWCxhQWhDVyxFQWlDWCx1QkFqQ1csRUFrQ1gsUUFsQ1csRUFtQ1gscUJBbkNXLEVBb0NYLFlBcENXLEVBcUNYLHNCQXJDVyxFQXNDWCxPQXRDVyxFQXVDWCxTQXZDVyxFQXdDWCxhQXhDVyxFQXlDWCxxQkF6Q1csRUEwQ1gsZ0JBMUNXLEVBMkNYLFNBM0NXLEVBNENYLGtCQTVDVyxFQTZDWCxZQTdDVyxFQThDWCxpQkE5Q1csRUErQ1gsNEJBL0NXLEVBZ0RYLGtCQWhEVyxFQWlEWCxLQWpEVyxFQWtEWCxjQWxEVyxFQW1EWCxXQW5EVyxFQW9EWCxvQkFwRFcsRUFxRFgsT0FyRFcsRUFzRFgsa0JBdERXLEVBdURYLGtCQXZEVyxFQXdEWCxnQ0F4RFcsRUF5RFgsMEJBekRXLEVBMERYLGNBMURXLEVBMkRYLHNCQTNEVyxFQTREWCxlQTVEVyxFQTZEWCx3QkE3RFcsRUE4RFgsZUE5RFcsRUErRFgsa0JBL0RXLEVBZ0VYLDRCQWhFVyxFQWlFWCxrQkFqRVcsRUFrRVgsV0FsRVcsRUFtRVgsa0NBbkVXLEVBb0VYLGlCQXBFVyxFQXFFWCxNQXJFVyxFQXNFWCxhQXRFVyxDQURFOztBQTBFZkMsY0FBWSxDQUNWLFlBRFUsRUFFVixRQUZVLEVBR1YscUJBSFUsRUFJVixNQUpVLEVBS1YsUUFMVSxFQU1WLE1BTlUsQ0ExRUc7O0FBbUZmQyxlQUFhO0FBQ1gsa0JBQWMsS0FESDtBQUVYLGNBQVUsS0FGQztBQUdYLDJCQUF1QixLQUhaO0FBSVgsWUFBUSxNQUpHO0FBS1gsY0FBVSxNQUxDO0FBTVgsWUFBUTtBQU5HLEdBbkZFOztBQTRGZkMsYUFBVyxDQUNULGNBRFMsRUFFVCxjQUZTLEVBR1QsY0FIUyxFQUlULGFBSlMsQ0E1Rkk7O0FBbUdmQyxrQkFBZ0IsQ0FDZCxZQURjLEVBRWQsWUFGYyxFQUdkLFlBSGMsRUFJZCxVQUpjO0FBbkdELENBQWpCIiwiZmlsZSI6InByaXZhdGUvY29uc3RhbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJpb1BheENsYXNzOiBbXG4gICAgXCJCaW5kaW5nRmVhdHVyZVwiLFxuICAgIFwiQmlvY2hlbWljYWxQYXRod2F5U3RlcFwiLFxuICAgIFwiQmlvY2hlbWljYWxSZWFjdGlvblwiLFxuICAgIFwiQmlvU291cmNlXCIsXG4gICAgXCJDYXRhbHlzaXNcIixcbiAgICBcIkNlbGx1bGFyTG9jYXRpb25Wb2NhYnVsYXJ5XCIsXG4gICAgXCJDZWxsVm9jYWJ1bGFyeVwiLFxuICAgIFwiQ2hlbWljYWxTdHJ1Y3R1cmVcIixcbiAgICBcIkNvbXBsZXhcIixcbiAgICBcIkNvbXBsZXhBc3NlbWJseVwiLFxuICAgIFwiQ29udHJvbFwiLFxuICAgIFwiQ29udHJvbGxlZFZvY2FidWxhcnlcIixcbiAgICBcIkNvbnZlcnNpb25cIixcbiAgICBcIkNvdmFsZW50QmluZGluZ0ZlYXR1cmVcIixcbiAgICBcIkRlZ3JhZGF0aW9uXCIsXG4gICAgXCJEZWx0YUdcIixcbiAgICBcIkRuYVwiLFxuICAgIFwiRG5hUmVmZXJlbmNlXCIsXG4gICAgXCJEbmFSZWdpb25cIixcbiAgICBcIkRuYVJlZ2lvblJlZmVyZW5jZVwiLFxuICAgIFwiRW50aXR5XCIsXG4gICAgXCJFbnRpdHlGZWF0dXJlXCIsXG4gICAgXCJFbnRpdHlSZWZlcmVuY2VcIixcbiAgICBcIkVudGl0eVJlZmVyZW5jZVR5cGVWb2NhYnVsYXJ5XCIsXG4gICAgXCJFdmlkZW5jZVwiLFxuICAgIFwiRXZpZGVuY2VDb2RlVm9jYWJ1bGFyeVwiLFxuICAgIFwiRXhwZXJpbWVudGFsRm9ybVwiLFxuICAgIFwiRXhwZXJpbWVudGFsRm9ybVZvY2FidWxhcnlcIixcbiAgICBcIkZyYWdtZW50RmVhdHVyZVwiLFxuICAgIFwiR2VuZVwiLFxuICAgIFwiR2VuZXRpY0ludGVyYWN0aW9uXCIsXG4gICAgXCJJbnRlcmFjdGlvblwiLFxuICAgIFwiSW50ZXJhY3Rpb25Wb2NhYnVsYXJ5XCIsXG4gICAgXCJLUHJpbWVcIixcbiAgICBcIk1vZGlmaWNhdGlvbkZlYXR1cmVcIixcbiAgICBcIk1vZHVsYXRpb25cIixcbiAgICBcIk1vbGVjdWxhckludGVyYWN0aW9uXCIsXG4gICAgXCJOYW1lZFwiLFxuICAgIFwiUGF0aHdheVwiLFxuICAgIFwiUGF0aHdheVN0ZXBcIixcbiAgICBcIlBoZW5vdHlwZVZvY2FidWxhcnlcIixcbiAgICBcIlBoeXNpY2FsRW50aXR5XCIsXG4gICAgXCJQcm90ZWluXCIsXG4gICAgXCJQcm90ZWluUmVmZXJlbmNlXCIsXG4gICAgXCJQcm92ZW5hbmNlXCIsXG4gICAgXCJQdWJsaWNhdGlvblhyZWZcIixcbiAgICBcIlJlbGF0aW9uc2hpcFR5cGVWb2NhYnVsYXJ5XCIsXG4gICAgXCJSZWxhdGlvbnNoaXBYcmVmXCIsXG4gICAgXCJSbmFcIixcbiAgICBcIlJuYVJlZmVyZW5jZVwiLFxuICAgIFwiUm5hUmVnaW9uXCIsXG4gICAgXCJSbmFSZWdpb25SZWZlcmVuY2VcIixcbiAgICBcIlNjb3JlXCIsXG4gICAgXCJTZXF1ZW5jZUludGVydmFsXCIsXG4gICAgXCJTZXF1ZW5jZUxvY2F0aW9uXCIsXG4gICAgXCJTZXF1ZW5jZU1vZGlmaWNhdGlvblZvY2FidWxhcnlcIixcbiAgICBcIlNlcXVlbmNlUmVnaW9uVm9jYWJ1bGFyeVwiLFxuICAgIFwiU2VxdWVuY2VTaXRlXCIsXG4gICAgXCJTaW1wbGVQaHlzaWNhbEVudGl0eVwiLFxuICAgIFwiU21hbGxNb2xlY3VsZVwiLFxuICAgIFwiU21hbGxNb2xlY3VsZVJlZmVyZW5jZVwiLFxuICAgIFwiU3RvaWNoaW9tZXRyeVwiLFxuICAgIFwiVGVtcGxhdGVSZWFjdGlvblwiLFxuICAgIFwiVGVtcGxhdGVSZWFjdGlvblJlZ3VsYXRpb25cIixcbiAgICBcIlRpc3N1ZVZvY2FidWxhcnlcIixcbiAgICBcIlRyYW5zcG9ydFwiLFxuICAgIFwiVHJhbnNwb3J0V2l0aEJpb2NoZW1pY2FsUmVhY3Rpb25cIixcbiAgICBcIlVuaWZpY2F0aW9uWHJlZlwiLFxuICAgIFwiWHJlZlwiLFxuICAgIFwiWFJlZmVycmFibGVcIlxuICBdLFxuXG4gIHBjMkZvcm1hdHM6IFtcbiAgICBcIkJJTkFSWV9TSUZcIixcbiAgICBcIkJJT1BBWFwiLFxuICAgIFwiRVhURU5ERURfQklOQVJZX1NJRlwiLFxuICAgIFwiR1NFQVwiLFxuICAgIFwiSlNPTkxEXCIsXG4gICAgXCJTQkdOXCJcbiAgXSxcblxuICBmaWxlRm9ybWF0czoge1xuICAgIFwiQklOQVJZX1NJRlwiOiBcInNpZlwiLFxuICAgIFwiQklPUEFYXCI6IFwib3dsXCIsXG4gICAgXCJFWFRFTkRFRF9CSU5BUllfU0lGXCI6IFwic2lmXCIsXG4gICAgXCJHU0VBXCI6IFwiZ3NlYVwiLFxuICAgIFwiSlNPTkxEXCI6IFwianNvblwiLFxuICAgIFwiU0JHTlwiOiBcInNiZ25cIlxuICB9LFxuXG4gIGdyYXBoS2luZDogW1xuICAgIFwiQ09NTU9OU1RSRUFNXCIsXG4gICAgXCJORUlHSEJPUkhPT0RcIixcbiAgICBcIlBBVEhTQkVUV0VFTlwiLFxuICAgIFwiUEFUSFNGUk9NVE9cIlxuICBdLFxuXG4gIGdyYXBoRGlyZWN0aW9uOiBbXG4gICAgXCJCT1RIU1RSRUFNXCIsXG4gICAgXCJET1dOU1RSRUFNXCIsXG4gICAgXCJVTkRJUkVDVEVEXCIsXG4gICAgXCJVUFNUUkVBTVwiXG4gIF1cbn07XG4iXX0=