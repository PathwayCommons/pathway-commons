"use strict";

module.exports = {
  pcAddress: "http://www.pathwaycommons.org/pc2/",

  BioPaxClass: ["BindingFeature", "BiochemicalPathwayStep", "BiochemicalReaction", "BioSource", "Catalysis", "CellularLocationVocabulary", "CellVocabulary", "ChemicalStructure", "Complex", "ComplexAssembly", "Control", "ControlledVocabulary", "Conversion", "CovalentBindingFeature", "Degradation", "DeltaG", "Dna", "DnaReference", "DnaRegion", "DnaRegionReference", "Entity", "EntityFeature", "EntityReference", "EntityReferenceTypeVocabulary", "Evidence", "EvidenceCodeVocabulary", "ExperimentalForm", "ExperimentalFormVocabulary", "FragmentFeature", "Gene", "GeneticInteraction", "Interaction", "InteractionVocabulary", "KPrime", "ModificationFeature", "Modulation", "MolecularInteraction", "Named", "Pathway", "PathwayStep", "PhenotypeVocabulary", "PhysicalEntity", "Protein", "ProteinReference", "Provenance", "PublicationXref", "RelationshipTypeVocabulary", "RelationshipXref", "Rna", "RnaReference", "RnaRegion", "RnaRegionReference", "Score", "SequenceInterval", "SequenceLocation", "SequenceModificationVocabulary", "SequenceRegionVocabulary", "SequenceSite", "SimplePhysicalEntity", "SmallMolecule", "SmallMoleculeReference", "Stoichiometry", "TemplateReaction", "TemplateReactionRegulation", "TissueVocabulary", "Transport", "TransportWithBiochemicalReaction", "UnificationXref", "Xref", "XReferrable"],

  pc2Formats: ["BINARY_SIF", "BIOPAX", "EXTENDED_BINARY_SIF", "GSEA", "JSONLD", "SBGN"],

  fileFormats: {
    "BINARY_SIF": "sif",
    "BIOPAX": "owl",
    "EXTENDED_BINARY_SIF": "sif",
    "GSEA": "gsea",
    "JSONLD": "json",
    "SBGN": "sbgn"
  },

  graphKind: ["COMMONSTREAM", "NEIGHBORHOOD", "PATHSBETWEEN", "PATHSFROMTO"],

  graphDirection: ["BOTHSTREAM", "DOWNSTREAM", "UNDIRECTED", "UPSTREAM"]
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByaXZhdGUvY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJwY0FkZHJlc3MiLCJCaW9QYXhDbGFzcyIsInBjMkZvcm1hdHMiLCJmaWxlRm9ybWF0cyIsImdyYXBoS2luZCIsImdyYXBoRGlyZWN0aW9uIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZDLGFBQVcsb0NBREk7O0FBR2ZDLGVBQWEsQ0FDWCxnQkFEVyxFQUVYLHdCQUZXLEVBR1gscUJBSFcsRUFJWCxXQUpXLEVBS1gsV0FMVyxFQU1YLDRCQU5XLEVBT1gsZ0JBUFcsRUFRWCxtQkFSVyxFQVNYLFNBVFcsRUFVWCxpQkFWVyxFQVdYLFNBWFcsRUFZWCxzQkFaVyxFQWFYLFlBYlcsRUFjWCx3QkFkVyxFQWVYLGFBZlcsRUFnQlgsUUFoQlcsRUFpQlgsS0FqQlcsRUFrQlgsY0FsQlcsRUFtQlgsV0FuQlcsRUFvQlgsb0JBcEJXLEVBcUJYLFFBckJXLEVBc0JYLGVBdEJXLEVBdUJYLGlCQXZCVyxFQXdCWCwrQkF4QlcsRUF5QlgsVUF6QlcsRUEwQlgsd0JBMUJXLEVBMkJYLGtCQTNCVyxFQTRCWCw0QkE1QlcsRUE2QlgsaUJBN0JXLEVBOEJYLE1BOUJXLEVBK0JYLG9CQS9CVyxFQWdDWCxhQWhDVyxFQWlDWCx1QkFqQ1csRUFrQ1gsUUFsQ1csRUFtQ1gscUJBbkNXLEVBb0NYLFlBcENXLEVBcUNYLHNCQXJDVyxFQXNDWCxPQXRDVyxFQXVDWCxTQXZDVyxFQXdDWCxhQXhDVyxFQXlDWCxxQkF6Q1csRUEwQ1gsZ0JBMUNXLEVBMkNYLFNBM0NXLEVBNENYLGtCQTVDVyxFQTZDWCxZQTdDVyxFQThDWCxpQkE5Q1csRUErQ1gsNEJBL0NXLEVBZ0RYLGtCQWhEVyxFQWlEWCxLQWpEVyxFQWtEWCxjQWxEVyxFQW1EWCxXQW5EVyxFQW9EWCxvQkFwRFcsRUFxRFgsT0FyRFcsRUFzRFgsa0JBdERXLEVBdURYLGtCQXZEVyxFQXdEWCxnQ0F4RFcsRUF5RFgsMEJBekRXLEVBMERYLGNBMURXLEVBMkRYLHNCQTNEVyxFQTREWCxlQTVEVyxFQTZEWCx3QkE3RFcsRUE4RFgsZUE5RFcsRUErRFgsa0JBL0RXLEVBZ0VYLDRCQWhFVyxFQWlFWCxrQkFqRVcsRUFrRVgsV0FsRVcsRUFtRVgsa0NBbkVXLEVBb0VYLGlCQXBFVyxFQXFFWCxNQXJFVyxFQXNFWCxhQXRFVyxDQUhFOztBQTRFZkMsY0FBWSxDQUNWLFlBRFUsRUFFVixRQUZVLEVBR1YscUJBSFUsRUFJVixNQUpVLEVBS1YsUUFMVSxFQU1WLE1BTlUsQ0E1RUc7O0FBcUZmQyxlQUFhO0FBQ1gsa0JBQWMsS0FESDtBQUVYLGNBQVUsS0FGQztBQUdYLDJCQUF1QixLQUhaO0FBSVgsWUFBUSxNQUpHO0FBS1gsY0FBVSxNQUxDO0FBTVgsWUFBUTtBQU5HLEdBckZFOztBQThGZkMsYUFBVyxDQUNULGNBRFMsRUFFVCxjQUZTLEVBR1QsY0FIUyxFQUlULGFBSlMsQ0E5Rkk7O0FBcUdmQyxrQkFBZ0IsQ0FDZCxZQURjLEVBRWQsWUFGYyxFQUdkLFlBSGMsRUFJZCxVQUpjO0FBckdELENBQWpCIiwiZmlsZSI6InByaXZhdGUvY29uc3RhbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBjQWRkcmVzczogXCJodHRwOi8vd3d3LnBhdGh3YXljb21tb25zLm9yZy9wYzIvXCIsXG5cbiAgQmlvUGF4Q2xhc3M6IFtcbiAgICBcIkJpbmRpbmdGZWF0dXJlXCIsXG4gICAgXCJCaW9jaGVtaWNhbFBhdGh3YXlTdGVwXCIsXG4gICAgXCJCaW9jaGVtaWNhbFJlYWN0aW9uXCIsXG4gICAgXCJCaW9Tb3VyY2VcIixcbiAgICBcIkNhdGFseXNpc1wiLFxuICAgIFwiQ2VsbHVsYXJMb2NhdGlvblZvY2FidWxhcnlcIixcbiAgICBcIkNlbGxWb2NhYnVsYXJ5XCIsXG4gICAgXCJDaGVtaWNhbFN0cnVjdHVyZVwiLFxuICAgIFwiQ29tcGxleFwiLFxuICAgIFwiQ29tcGxleEFzc2VtYmx5XCIsXG4gICAgXCJDb250cm9sXCIsXG4gICAgXCJDb250cm9sbGVkVm9jYWJ1bGFyeVwiLFxuICAgIFwiQ29udmVyc2lvblwiLFxuICAgIFwiQ292YWxlbnRCaW5kaW5nRmVhdHVyZVwiLFxuICAgIFwiRGVncmFkYXRpb25cIixcbiAgICBcIkRlbHRhR1wiLFxuICAgIFwiRG5hXCIsXG4gICAgXCJEbmFSZWZlcmVuY2VcIixcbiAgICBcIkRuYVJlZ2lvblwiLFxuICAgIFwiRG5hUmVnaW9uUmVmZXJlbmNlXCIsXG4gICAgXCJFbnRpdHlcIixcbiAgICBcIkVudGl0eUZlYXR1cmVcIixcbiAgICBcIkVudGl0eVJlZmVyZW5jZVwiLFxuICAgIFwiRW50aXR5UmVmZXJlbmNlVHlwZVZvY2FidWxhcnlcIixcbiAgICBcIkV2aWRlbmNlXCIsXG4gICAgXCJFdmlkZW5jZUNvZGVWb2NhYnVsYXJ5XCIsXG4gICAgXCJFeHBlcmltZW50YWxGb3JtXCIsXG4gICAgXCJFeHBlcmltZW50YWxGb3JtVm9jYWJ1bGFyeVwiLFxuICAgIFwiRnJhZ21lbnRGZWF0dXJlXCIsXG4gICAgXCJHZW5lXCIsXG4gICAgXCJHZW5ldGljSW50ZXJhY3Rpb25cIixcbiAgICBcIkludGVyYWN0aW9uXCIsXG4gICAgXCJJbnRlcmFjdGlvblZvY2FidWxhcnlcIixcbiAgICBcIktQcmltZVwiLFxuICAgIFwiTW9kaWZpY2F0aW9uRmVhdHVyZVwiLFxuICAgIFwiTW9kdWxhdGlvblwiLFxuICAgIFwiTW9sZWN1bGFySW50ZXJhY3Rpb25cIixcbiAgICBcIk5hbWVkXCIsXG4gICAgXCJQYXRod2F5XCIsXG4gICAgXCJQYXRod2F5U3RlcFwiLFxuICAgIFwiUGhlbm90eXBlVm9jYWJ1bGFyeVwiLFxuICAgIFwiUGh5c2ljYWxFbnRpdHlcIixcbiAgICBcIlByb3RlaW5cIixcbiAgICBcIlByb3RlaW5SZWZlcmVuY2VcIixcbiAgICBcIlByb3ZlbmFuY2VcIixcbiAgICBcIlB1YmxpY2F0aW9uWHJlZlwiLFxuICAgIFwiUmVsYXRpb25zaGlwVHlwZVZvY2FidWxhcnlcIixcbiAgICBcIlJlbGF0aW9uc2hpcFhyZWZcIixcbiAgICBcIlJuYVwiLFxuICAgIFwiUm5hUmVmZXJlbmNlXCIsXG4gICAgXCJSbmFSZWdpb25cIixcbiAgICBcIlJuYVJlZ2lvblJlZmVyZW5jZVwiLFxuICAgIFwiU2NvcmVcIixcbiAgICBcIlNlcXVlbmNlSW50ZXJ2YWxcIixcbiAgICBcIlNlcXVlbmNlTG9jYXRpb25cIixcbiAgICBcIlNlcXVlbmNlTW9kaWZpY2F0aW9uVm9jYWJ1bGFyeVwiLFxuICAgIFwiU2VxdWVuY2VSZWdpb25Wb2NhYnVsYXJ5XCIsXG4gICAgXCJTZXF1ZW5jZVNpdGVcIixcbiAgICBcIlNpbXBsZVBoeXNpY2FsRW50aXR5XCIsXG4gICAgXCJTbWFsbE1vbGVjdWxlXCIsXG4gICAgXCJTbWFsbE1vbGVjdWxlUmVmZXJlbmNlXCIsXG4gICAgXCJTdG9pY2hpb21ldHJ5XCIsXG4gICAgXCJUZW1wbGF0ZVJlYWN0aW9uXCIsXG4gICAgXCJUZW1wbGF0ZVJlYWN0aW9uUmVndWxhdGlvblwiLFxuICAgIFwiVGlzc3VlVm9jYWJ1bGFyeVwiLFxuICAgIFwiVHJhbnNwb3J0XCIsXG4gICAgXCJUcmFuc3BvcnRXaXRoQmlvY2hlbWljYWxSZWFjdGlvblwiLFxuICAgIFwiVW5pZmljYXRpb25YcmVmXCIsXG4gICAgXCJYcmVmXCIsXG4gICAgXCJYUmVmZXJyYWJsZVwiXG4gIF0sXG5cbiAgcGMyRm9ybWF0czogW1xuICAgIFwiQklOQVJZX1NJRlwiLFxuICAgIFwiQklPUEFYXCIsXG4gICAgXCJFWFRFTkRFRF9CSU5BUllfU0lGXCIsXG4gICAgXCJHU0VBXCIsXG4gICAgXCJKU09OTERcIixcbiAgICBcIlNCR05cIlxuICBdLFxuXG4gIGZpbGVGb3JtYXRzOiB7XG4gICAgXCJCSU5BUllfU0lGXCI6IFwic2lmXCIsXG4gICAgXCJCSU9QQVhcIjogXCJvd2xcIixcbiAgICBcIkVYVEVOREVEX0JJTkFSWV9TSUZcIjogXCJzaWZcIixcbiAgICBcIkdTRUFcIjogXCJnc2VhXCIsXG4gICAgXCJKU09OTERcIjogXCJqc29uXCIsXG4gICAgXCJTQkdOXCI6IFwic2JnblwiXG4gIH0sXG5cbiAgZ3JhcGhLaW5kOiBbXG4gICAgXCJDT01NT05TVFJFQU1cIixcbiAgICBcIk5FSUdIQk9SSE9PRFwiLFxuICAgIFwiUEFUSFNCRVRXRUVOXCIsXG4gICAgXCJQQVRIU0ZST01UT1wiXG4gIF0sXG5cbiAgZ3JhcGhEaXJlY3Rpb246IFtcbiAgICBcIkJPVEhTVFJFQU1cIixcbiAgICBcIkRPV05TVFJFQU1cIixcbiAgICBcIlVORElSRUNURURcIixcbiAgICBcIlVQU1RSRUFNXCJcbiAgXVxufTtcbiJdfQ==